"""
Unit tests for the in translate function in the translator module

To activate pytest on Pycharm follow these steps:
> go to Pycharm Settings
> Expand Tools
> Click Python Integrated Tools
> Under Testing section: Default test runner, select pytest
> Click Fix to install the module if prompted

@author: Susan Fox
@author: Amin G. Alhashim (aalhashi@macalester.edu)
"""
import os
from src.bd_manager import get_braille_dictionary
from src.translator import translate
from src.translator import translate_document
from src.helper_funs import get_braille_file_name

bd = get_braille_dictionary()


def test_translate_hi():
    sentence = "Hi!"
    expected = [[1, 1, 0, 0, 1, 0], [0, 1, 0, 1, 0, 0]]

    actual = translate(sentence, bd)
    assert actual == expected


def test_translate_fox():
    sentence = "the quick brown fox jumps over the lazy dog"
    expected = [[0, 1, 1, 1, 1, 0], [1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 0], [1, 0, 1, 0, 0, 1], [0, 1, 0, 1, 0, 0], [1, 0, 0, 1, 0, 0], [1, 0, 1, 0, 0, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 1, 0, 0, 0, 0], [1, 1, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 1, 1], [1, 0, 1, 1, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 1, 0, 1, 0, 0], [1, 0, 1, 0, 1, 0], [1, 0, 1, 1, 0, 1],
                [0, 0, 0, 0, 0, 0],
                [0, 1, 0, 1, 1, 0], [1, 0, 1, 0, 0, 1], [1, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0], [0, 1, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 0, 1, 0, 1, 0], [1, 1, 1, 0, 0, 1], [1, 0, 0, 0, 1, 0], [1, 1, 1, 0, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [0, 1, 1, 1, 1, 0], [1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 1], [1, 0, 1, 1, 1, 1],
                [0, 0, 0, 0, 0, 0],
                [1, 0, 0, 1, 1, 0], [1, 0, 1, 0, 1, 0], [1, 1, 0, 1, 1, 0]]

    actual = translate(sentence, bd)
    assert actual == expected


def test_translate_do():
    sentence = "do it as you will"
    expected = [[1, 0, 0, 1, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 0, 1, 1, 0, 1],
                [0, 0, 0, 0, 0, 0],
                [1, 0, 1, 0, 1, 1],
                [0, 0, 0, 0, 0, 0],
                [1, 0, 1, 1, 1, 1],
                [0, 0, 0, 0, 0, 0],
                [0, 1, 0, 1, 1, 1]]

    actual = translate(sentence, bd)
    assert actual == expected


def test_translate_planet():
    sentence = "from every corner of the planet, people go and seek more knowledge"
    expected = [[1, 1, 0, 1, 0, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 0, 0, 1, 0, 0], [1, 0, 1, 0, 1, 0], [1, 1, 1, 0, 1, 0], [1, 0, 1, 1, 1, 0], [1, 0, 0, 0, 1, 0],
                [1, 1, 1, 0, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 0, 1, 0, 1, 0], [1, 1, 0, 1, 0, 0],
                [0, 0, 0, 0, 0, 0],
                [0, 1, 1, 1, 1, 0], [1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 0, 0], [1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 0], [1, 0, 0, 0, 1, 0],
                [0, 1, 1, 1, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 1, 0, 1, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 0], [1, 0, 0, 1, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [0, 1, 1, 1, 0, 0], [1, 0, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0], [1, 0, 1, 0, 0, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 0, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 0, 1, 0, 0, 0]]

    actual = translate(sentence, bd)
    assert actual == expected


def test_translate_more():
    sentence = "It's possible we can do more with just very little."
    expected = [[0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 0, 0], [1, 0, 1, 0, 1, 0], [0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 0, 0], [0, 1, 0, 1, 0, 0],
                [1, 1, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 0, 0, 1, 0, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 0, 0, 1, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 0, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 0],
                [0, 1, 0, 1, 1, 1], [0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 1, 0], [1, 1, 0, 0, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [0, 1, 0, 1, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 1, 1, 0, 0, 1],
                [0, 0, 0, 0, 0, 0],
                [1, 1, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 1, 0], [1, 1, 1, 0, 0, 0],
                [1, 0, 0, 0, 1, 0]]

    actual = translate(sentence, bd)
    assert actual == expected


def test_translate_conundrum():
    sentence = "I have quite the conundrum that may come back to bite us."
    expected = [[0, 1, 0, 1, 0, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 1, 0, 0, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [0, 1, 1, 1, 1, 0], [1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 0, 0, 1, 0, 0], [1, 0, 1, 0, 1, 0], [1, 0, 1, 1, 1, 0], [1, 0, 1, 0, 0, 1], [1, 0, 1, 1, 1, 0],
                [1, 0, 0, 1, 1, 0], [1, 1, 1, 0, 1, 0], [1, 0, 1, 0, 0, 1], [1, 0, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 0],
                [0, 1, 1, 1, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 0, 1, 1, 0, 0], [1, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 1],
                [0, 0, 0, 0, 0, 0],
                [1, 0, 0, 1, 0, 0], [1, 0, 1, 0, 1, 0], [1, 0, 1, 1, 0, 0], [1, 0, 0, 0, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 1, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0], [1, 0, 0, 1, 0, 0], [1, 0, 1, 0, 0, 0],
                [0, 0, 0, 0, 0, 0],
                [0, 1, 1, 1, 1, 0], [1, 0, 1, 0, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 1, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 1, 0], [1, 0, 0, 0, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 0, 1, 0, 0, 1]]

    actual = translate(sentence, bd)
    assert actual == expected


def test_translate_racoons():
    sentence = "We have to do this so that racoons don't come back again."
    expected = [[0, 1, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 1, 0, 0, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [0, 1, 1, 1, 1, 0], [1, 0, 1, 0, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 0, 0, 1, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [0, 1, 1, 1, 1, 0], [1, 1, 0, 0, 1, 0], [0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 0],
                [0, 1, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 0],
                [0, 1, 1, 1, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 1, 1, 0, 1, 0], [1, 0, 0, 0, 0, 0], [1, 0, 0, 1, 0, 0], [1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0],
                [1, 0, 1, 1, 1, 0], [0, 1, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 0, 0, 1, 1, 0], [1, 0, 1, 0, 1, 0], [1, 0, 1, 1, 1, 0], [0, 1, 1, 1, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 0, 0, 1, 0, 0], [1, 0, 1, 0, 1, 0], [1, 0, 1, 1, 0, 0], [1, 0, 0, 0, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 1, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0], [1, 0, 0, 1, 0, 0], [1, 0, 1, 0, 0, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0], [1, 1, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0], [1, 0, 1, 1, 1, 0]]

    actual = translate(sentence, bd)
    assert actual == expected


def test_translate_start():
    sentence = "But rather then start over, why not be more like her and never give up?"
    expected = [[1, 1, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 1, 1, 0, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [0, 1, 1, 1, 1, 0], [1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0], [1, 0, 1, 1, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 0], [1, 0, 0, 0, 0, 0], [1, 1, 1, 0, 1, 0], [0, 1, 1, 1, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 0, 1, 0, 1, 0], [1, 1, 1, 0, 0, 1], [1, 0, 0, 0, 1, 0], [1, 1, 1, 0, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [0, 1, 0, 1, 1, 1], [1, 1, 0, 0, 1, 0], [1, 0, 1, 1, 1, 1],
                [0, 0, 0, 0, 0, 0],
                [1, 0, 1, 1, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 1, 0, 0, 0, 0], [1, 0, 0, 0, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 0, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 1, 1, 0, 0, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 1, 0, 0, 1, 0], [1, 0, 0, 0, 1, 0], [1, 1, 1, 0, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0], [1, 0, 1, 1, 1, 0], [1, 0, 0, 1, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 0, 1, 1, 1, 0], [1, 0, 0, 0, 1, 0], [1, 1, 1, 0, 0, 1], [1, 0, 0, 0, 1, 0], [1, 1, 1, 0, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 1, 0, 1, 1, 0], [0, 1, 0, 1, 0, 0], [1, 1, 1, 0, 0, 1], [1, 0, 0, 0, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 0, 1, 0, 0, 1], [1, 1, 1, 1, 0, 0]]

    actual = translate(sentence, bd)
    assert actual == expected


def test_translate_much():
    sentence = "How much is too much?"
    expected = [[1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 1, 0], [0, 1, 0, 1, 1, 1],
                [0, 0, 0, 0, 0, 0],
                [1, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 1], [1, 0, 0, 1, 0, 0], [1, 1, 0, 0, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 0],
                [0, 0, 0, 0, 0, 0],
                [0, 1, 1, 1, 1, 0], [1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0],
                [0, 0, 0, 0, 0, 0],
                [1, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 1], [1, 0, 0, 1, 0, 0], [1, 1, 0, 0, 1, 0]]

    actual = translate(sentence, bd)
    assert actual == expected


def test_translate_document_sample():
    file_name = "../res/sample.txt"
    translate_document(bd, file_name)

    result_file_name = get_braille_file_name(file_name)
    assert os.path.exists(result_file_name)
    test_file = open(result_file_name, 'r')
    doc = test_file.read()
    assert len(doc) == 1923
    assert doc.count("\n") == 3
    assert doc.find("\n") == 640
    assert (doc[0], doc[100], doc[1001]) == ('1', '1', '0')
